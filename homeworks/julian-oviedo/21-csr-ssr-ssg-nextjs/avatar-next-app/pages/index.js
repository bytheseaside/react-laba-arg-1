import Head from 'next/head';
import styles from '../src/styles/Home.module.css';
import { React, useState } from 'react';
import RefreshAllButton from '../src/components/RefreshAllButton/RefreshAllButton.jsx';
import AddButton from '../src/components/AddButton/AddButton.jsx';
import AvatarCard from '../src/components/AvatarCard/AvatarCard.jsx';

const URL1IMG = 'https://tinyfac.es/api/data?limit=1&quality=0';
const URL5IMG = 'https://tinyfac.es/api/data?limit=5&quality=0';

export const getStaticProps = async () => {
  return fetch(URL5IMG)
    .then((res) => {
      if (res.ok) {
        return res.json();
      }
      throw new Error('Something went wrong trying pre-fetch');
    })
    .then((dataJson) => {
      const preFetch = dataJson.map((avatarImgs) => avatarImgs.url);
      return {
        props: { preFetchedAvatars: preFetch },
      };
    });
};

export default function Home({ preFetchedAvatars }) {
  const [avatars, setAvatars] = useState(preFetchedAvatars);
  function getAvatar() {
    return fetch(URL1IMG)
      .then((res) => {
        if (res.ok) {
          return res.json();
        }
        throw new Error('Something went wrong please try again later');
      })
      .then((dataJson) => {
        return dataJson[0].url;
      })
      .catch((err) => {
        console.log(err);
        return '/images/fetchErrorImg.svg';
      });
  }

  async function addAvatar() {
    const newAvatar = await getAvatar();
    const newList = [...avatars, newAvatar];
    setAvatars(newList);
  }

  async function refreshClickedAvatar(avatarId) {
    const newAvatar = await getAvatar();
    let newList = avatars.map((avatar, index) => {
      if (index === avatarId) {
        return newAvatar;
      }
      return avatar;
    });
    setAvatars(newList);
  }

  async function refreshAllAvatars() {
    let newList = await Promise.all(
      avatars.map(() => {
        return getAvatar();
      }),
    );
    setAvatars(newList);
  }

  return (
    <>
      <Head>
        <title> 21-csr-ssr-ssg-nextjs </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.App}>
        <div className={styles['cards-container']}>
          {avatars.map((avatar, index) => {
            return <AvatarCard key={index} avatarImg={avatar} onClick={() => refreshClickedAvatar(index)} />;
          })}
          <AddButton onClick={addAvatar} />
        </div>
        <RefreshAllButton onClick={refreshAllAvatars} />
      </main>
    </>
  );
}
